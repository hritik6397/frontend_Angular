{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { EventEmitter, Renderer2, ViewChild, Output, Input, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"zoomContainer\"];\nconst _c1 = [\"imageThumbnail\"];\nconst _c2 = [\"fullSizeImage\"];\n\nconst _c3 = function (a1) {\n  return {\n    \"ngxImageZoomFullContainer\": true,\n    \"ngxImageZoomLensEnabled\": a1\n  };\n};\n\nvar NgxImageZoomComponent_1;\nlet NgxImageZoomComponent = NgxImageZoomComponent_1 = class NgxImageZoomComponent {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.zoomScroll = new EventEmitter();\n    this.zoomPosition = new EventEmitter();\n    this.enableLens = false;\n    this.lensBorderRadius = 0;\n    this.lensWidth = 100;\n    this.lensHeight = 100;\n    this.zoomMode = 'hover';\n    this.magnification = 1;\n    this.enableScrollZoom = false;\n    this.scrollStepSize = 0.1;\n    this.circularLens = false;\n    this.maxZoomRatio = 2;\n    this.zoomingEnabled = false;\n    this.zoomFrozen = false;\n    this.isReady = false;\n    this.thumbImageLoaded = false;\n    this.fullImageLoaded = false;\n    this.eventListeners = [];\n  }\n\n  set setThumbImage(thumbImage) {\n    this.thumbImageLoaded = false;\n    this.isReady = false;\n    this.thumbImage = thumbImage;\n  }\n\n  set setFullImage(fullImage) {\n    this.fullImageLoaded = false;\n    this.isReady = false;\n    this.fullImage = fullImage;\n  }\n\n  set setZoomMode(zoomMode) {\n    if (NgxImageZoomComponent_1.validZoomModes.some(m => m === zoomMode)) {\n      this.zoomMode = zoomMode;\n    }\n  }\n\n  set setMagnification(magnification) {\n    this.magnification = Number(magnification) || this.magnification;\n    this.zoomScroll.emit(this.magnification);\n  }\n\n  set setMinZoomRatio(minZoomRatio) {\n    const ratio = Number(minZoomRatio) || this.minZoomRatio || this.baseRatio || 0;\n    this.minZoomRatio = Math.max(ratio, this.baseRatio || 0);\n  }\n\n  set setMaxZoomRatio(maxZoomRatio) {\n    this.maxZoomRatio = Number(maxZoomRatio) || this.maxZoomRatio;\n  }\n\n  set setScrollStepSize(stepSize) {\n    this.scrollStepSize = Number(stepSize) || this.scrollStepSize;\n  }\n\n  set setEnableLens(enable) {\n    this.enableLens = Boolean(enable);\n  }\n\n  set setLensWidth(width) {\n    this.lensWidth = Number(width) || this.lensWidth;\n  }\n\n  set setLensHeight(height) {\n    this.lensHeight = Number(height) || this.lensHeight;\n  }\n\n  set setCircularLens(enable) {\n    this.circularLens = Boolean(enable);\n  }\n\n  set setEnableScrollZoom(enable) {\n    this.enableScrollZoom = Boolean(enable);\n  }\n\n  ngOnInit() {\n    this.setUpEventListeners();\n  }\n\n  ngOnChanges() {\n    if (this.enableLens) {\n      if (this.circularLens) {\n        this.lensBorderRadius = this.lensWidth / 2;\n      } else {\n        this.lensBorderRadius = 0;\n      }\n    }\n\n    this.calculateRatioAndOffset();\n    this.calculateImageAndLensPosition();\n  }\n\n  ngOnDestroy() {\n    this.eventListeners.forEach(destroyFn => destroyFn());\n  }\n  /**\r\n   * Template helper methods\r\n   */\n\n\n  onThumbImageLoaded() {\n    this.thumbImageLoaded = true;\n    this.checkImagesLoaded();\n  }\n\n  onFullImageLoaded() {\n    this.fullImageLoaded = true;\n    this.checkImagesLoaded();\n  }\n\n  setUpEventListeners() {\n    if (this.zoomMode === 'hover') {\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseenter', event => this.hoverMouseEnter(event)));\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.hoverMouseLeave()));\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', event => this.hoverMouseMove(event)));\n    } else if (this.zoomMode === 'toggle') {\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', event => this.toggleClick(event)));\n    } else if (this.zoomMode === 'click') {\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', event => this.clickStarter(event)));\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.clickMouseLeave()));\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', event => this.clickMouseMove(event)));\n    } else if (this.zoomMode === 'hover-freeze') {\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseenter', event => this.hoverFreezeMouseEnter(event)));\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', () => this.hoverFreezeMouseLeave()));\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', event => this.hoverFreezeMouseMove(event)));\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', event => this.hoverFreezeClick(event)));\n    }\n\n    if (this.enableScrollZoom) {\n      // Chrome: 'mousewheel', Firefox: 'DOMMouseScroll', IE: 'onmousewheel'\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousewheel', event => this.onMouseWheel(event)));\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'DOMMouseScroll', event => this.onMouseWheel(event)));\n      this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'onmousewheel', event => this.onMouseWheel(event)));\n    }\n\n    if (this.enableLens && this.circularLens) {\n      this.lensBorderRadius = this.lensWidth / 2;\n    }\n  }\n\n  checkImagesLoaded() {\n    this.calculateRatioAndOffset();\n\n    if (this.thumbImageLoaded && this.fullImageLoaded) {\n      this.calculateImageAndLensPosition();\n      this.isReady = true;\n    }\n  }\n  /**\r\n   * Zoom position setters\r\n   */\n\n\n  setZoomPosition(left, top) {\n    this.latestMouseLeft = Number(left) || this.latestMouseLeft;\n    this.latestMouseTop = Number(top) || this.latestMouseTop;\n    const c = {\n      x: this.latestMouseLeft,\n      y: this.latestMouseTop\n    };\n    this.zoomPosition.emit(c);\n  }\n  /**\r\n   * Mouse wheel event\r\n   */\n\n\n  onMouseWheel(event) {\n    // Don't eat events if zooming isn't active\n    if (!this.zoomingEnabled || this.zoomFrozen) {\n      return;\n    }\n\n    event = window.event || event; // old IE\n\n    const direction = Math.max(Math.min(event.wheelDelta || -event.detail, 1), -1);\n\n    if (direction > 0) {\n      // up\n      this.setMagnification = Math.min(this.magnification + this.scrollStepSize, this.maxZoomRatio);\n    } else {\n      // down\n      this.setMagnification = Math.max(this.magnification - this.scrollStepSize, this.minZoomRatio);\n    }\n\n    this.calculateRatio();\n    this.calculateZoomPosition(event); // Prevent scrolling on page.\n\n    event.returnValue = false; // IE\n\n    if (event.preventDefault) {\n      event.preventDefault(); // Chrome & FF\n    }\n  }\n  /**\r\n   * Hover mode\r\n   */\n\n\n  hoverMouseEnter(event) {\n    this.zoomOn(event);\n  }\n\n  hoverMouseLeave() {\n    this.zoomOff();\n  }\n\n  hoverMouseMove(event) {\n    this.calculateZoomPosition(event);\n  }\n  /**\r\n   * Toggle mode\r\n   */\n\n\n  toggleClick(event) {\n    if (this.zoomingEnabled) {\n      this.zoomOff();\n    } else {\n      this.zoomOn(event);\n    }\n  }\n  /**\r\n   * Click mode\r\n   */\n\n\n  clickStarter(event) {\n    if (this.zoomingEnabled === false) {\n      this.zoomOn(event);\n    }\n  }\n\n  clickMouseLeave() {\n    this.zoomOff();\n  }\n\n  clickMouseMove(event) {\n    if (this.zoomingEnabled) {\n      this.calculateZoomPosition(event);\n    }\n  }\n  /**\r\n   * Hover freeze mode\r\n   */\n\n\n  hoverFreezeMouseEnter(event) {\n    if (this.zoomingEnabled && !this.zoomFrozen) {\n      this.zoomOn(event);\n    }\n  }\n\n  hoverFreezeMouseLeave() {\n    if (this.zoomingEnabled && !this.zoomFrozen) {\n      this.zoomOff();\n    }\n  }\n\n  hoverFreezeMouseMove(event) {\n    if (this.zoomingEnabled && !this.zoomFrozen) {\n      this.calculateZoomPosition(event);\n    }\n  }\n\n  hoverFreezeClick(event) {\n    if (this.zoomingEnabled && this.zoomFrozen) {\n      this.zoomFrozen = false;\n      this.zoomOff();\n    } else if (this.zoomingEnabled) {\n      this.zoomFrozen = true;\n    } else {\n      this.zoomOn(event);\n    }\n  }\n  /**\r\n   * Private helper methods\r\n   */\n\n\n  zoomOn(event) {\n    if (this.isReady) {\n      this.zoomingEnabled = true;\n      this.calculateRatioAndOffset();\n      this.display = 'block';\n      this.calculateZoomPosition(event);\n    }\n  }\n\n  zoomOff() {\n    this.zoomingEnabled = false;\n    this.display = 'none';\n  }\n\n  calculateZoomPosition(event) {\n    const newLeft = Math.max(Math.min(event.offsetX, this.thumbWidth), 0);\n    const newTop = Math.max(Math.min(event.offsetY, this.thumbHeight), 0);\n    this.setZoomPosition(newLeft, newTop);\n    this.calculateImageAndLensPosition();\n  }\n\n  calculateImageAndLensPosition() {\n    let lensLeftMod = 0;\n    let lensTopMod = 0;\n\n    if (this.enableLens) {\n      lensLeftMod = this.lensLeft = this.latestMouseLeft - this.lensWidth / 2;\n      lensTopMod = this.lensTop = this.latestMouseTop - this.lensHeight / 2;\n    }\n\n    this.fullImageLeft = this.latestMouseLeft * -this.xRatio - lensLeftMod;\n    this.fullImageTop = this.latestMouseTop * -this.yRatio - lensTopMod;\n  }\n\n  calculateRatioAndOffset() {\n    this.thumbWidth = this.imageThumbnail.nativeElement.width;\n    this.thumbHeight = this.imageThumbnail.nativeElement.height; // If lens is disabled, set lens size to equal thumb size and position it on top of the thumb\n\n    if (!this.enableLens) {\n      this.lensWidth = this.thumbWidth;\n      this.lensHeight = this.thumbHeight;\n      this.lensLeft = 0;\n      this.lensTop = 0;\n    } // getBoundingClientRect() ? https://stackoverflow.com/a/44008873\n\n\n    this.offsetTop = this.imageThumbnail.nativeElement.getBoundingClientRect().top;\n    this.offsetLeft = this.imageThumbnail.nativeElement.getBoundingClientRect().left;\n\n    if (this.fullImage === undefined) {\n      this.fullImage = this.thumbImage;\n    }\n\n    if (this.fullImageLoaded) {\n      this.fullWidth = this.fullSizeImage.nativeElement.naturalWidth;\n      this.fullHeight = this.fullSizeImage.nativeElement.naturalHeight;\n      this.baseRatio = Math.max(this.thumbWidth / this.fullWidth, this.thumbHeight / this.fullHeight); // Don't allow zooming to smaller than thumbnail size\n\n      this.minZoomRatio = Math.max(this.minZoomRatio || 0, this.baseRatio || 0);\n      this.calculateRatio();\n    }\n  }\n\n  calculateRatio() {\n    this.magnifiedWidth = this.fullWidth * this.magnification;\n    this.magnifiedHeight = this.fullHeight * this.magnification;\n    this.xRatio = (this.magnifiedWidth - this.thumbWidth) / this.thumbWidth;\n    this.yRatio = (this.magnifiedHeight - this.thumbHeight) / this.thumbHeight;\n  }\n\n};\n\nNgxImageZoomComponent.ɵfac = function NgxImageZoomComponent_Factory(t) {\n  return new (t || NgxImageZoomComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nNgxImageZoomComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NgxImageZoomComponent,\n  selectors: [[\"lib-ngx-image-zoom\"]],\n  viewQuery: function NgxImageZoomComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 7);\n      ɵngcc0.ɵɵviewQuery(_c1, 7);\n      ɵngcc0.ɵɵviewQuery(_c2, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.zoomContainer = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.imageThumbnail = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fullSizeImage = _t.first);\n    }\n  },\n  inputs: {\n    setThumbImage: [\"thumbImage\", \"setThumbImage\"],\n    setFullImage: [\"fullImage\", \"setFullImage\"],\n    setZoomMode: [\"zoomMode\", \"setZoomMode\"],\n    setMagnification: [\"magnification\", \"setMagnification\"],\n    setMinZoomRatio: [\"minZoomRatio\", \"setMinZoomRatio\"],\n    setMaxZoomRatio: [\"maxZoomRatio\", \"setMaxZoomRatio\"],\n    setScrollStepSize: [\"scrollStepSize\", \"setScrollStepSize\"],\n    setEnableLens: [\"enableLens\", \"setEnableLens\"],\n    setLensWidth: [\"lensWidth\", \"setLensWidth\"],\n    setLensHeight: [\"lensHeight\", \"setLensHeight\"],\n    setCircularLens: [\"circularLens\", \"setCircularLens\"],\n    setEnableScrollZoom: [\"enableScrollZoom\", \"setEnableScrollZoom\"]\n  },\n  outputs: {\n    zoomScroll: \"zoomScroll\",\n    zoomPosition: \"zoomPosition\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 7,\n  vars: 31,\n  consts: [[1, \"ngxImageZoomContainer\"], [\"zoomContainer\", \"\"], [1, \"ngxImageZoomThumbnail\", 3, \"src\", \"load\"], [\"imageThumbnail\", \"\"], [3, \"ngClass\"], [1, \"ngxImageZoomFull\", 3, \"src\", \"load\"], [\"fullSizeImage\", \"\"]],\n  template: function NgxImageZoomComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"img\", 2, 3);\n      ɵngcc0.ɵɵlistener(\"load\", function NgxImageZoomComponent_Template_img_load_2_listener() {\n        return ctx.onThumbImageLoaded();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n      ɵngcc0.ɵɵelementStart(5, \"img\", 5, 6);\n      ɵngcc0.ɵɵlistener(\"load\", function NgxImageZoomComponent_Template_img_load_5_listener() {\n        return ctx.onFullImageLoaded();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.thumbWidth, \"px\")(\"height\", ctx.thumbHeight, \"px\");\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"src\", ctx.thumbImage, ɵngcc0.ɵɵsanitizeUrl);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵstyleProp(\"display\", ctx.display)(\"top\", ctx.lensTop, \"px\")(\"left\", ctx.lensLeft, \"px\")(\"width\", ctx.lensWidth, \"px\")(\"height\", ctx.lensHeight, \"px\")(\"border-radius\", ctx.lensBorderRadius, \"px\");\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(29, _c3, ctx.enableLens));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"display\", ctx.display)(\"top\", ctx.fullImageTop, \"px\")(\"left\", ctx.fullImageLeft, \"px\")(\"width\", ctx.magnifiedWidth, \"px\")(\"height\", ctx.magnifiedHeight, \"px\");\n      ɵngcc0.ɵɵproperty(\"src\", ctx.fullImage, ɵngcc0.ɵɵsanitizeUrl);\n    }\n  },\n  directives: [ɵngcc1.NgClass],\n  styles: [\".ngxImageZoomContainer[_ngcontent-%COMP%]{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail[_ngcontent-%COMP%]{pointer-events:all}.ngxImageZoomFull[_ngcontent-%COMP%]{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer[_ngcontent-%COMP%]{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled[_ngcontent-%COMP%]{border:2px solid red;cursor:crosshair;pointer-events:none}\"]\n});\nNgxImageZoomComponent.validZoomModes = ['hover', 'toggle', 'click', 'hover-freeze'];\n\nNgxImageZoomComponent.ctorParameters = () => [{\n  type: Renderer2\n}];\n\n__decorate([ViewChild('zoomContainer', {\n  static: true\n})], NgxImageZoomComponent.prototype, \"zoomContainer\", void 0);\n\n__decorate([ViewChild('imageThumbnail', {\n  static: true\n})], NgxImageZoomComponent.prototype, \"imageThumbnail\", void 0);\n\n__decorate([ViewChild('fullSizeImage', {\n  static: true\n})], NgxImageZoomComponent.prototype, \"fullSizeImage\", void 0);\n\n__decorate([Output()], NgxImageZoomComponent.prototype, \"zoomScroll\", void 0);\n\n__decorate([Output()], NgxImageZoomComponent.prototype, \"zoomPosition\", void 0);\n\n__decorate([Input('thumbImage')], NgxImageZoomComponent.prototype, \"setThumbImage\", null);\n\n__decorate([Input('fullImage')], NgxImageZoomComponent.prototype, \"setFullImage\", null);\n\n__decorate([Input('zoomMode')], NgxImageZoomComponent.prototype, \"setZoomMode\", null);\n\n__decorate([Input('magnification')], NgxImageZoomComponent.prototype, \"setMagnification\", null);\n\n__decorate([Input('minZoomRatio')], NgxImageZoomComponent.prototype, \"setMinZoomRatio\", null);\n\n__decorate([Input('maxZoomRatio')], NgxImageZoomComponent.prototype, \"setMaxZoomRatio\", null);\n\n__decorate([Input('scrollStepSize')], NgxImageZoomComponent.prototype, \"setScrollStepSize\", null);\n\n__decorate([Input('enableLens')], NgxImageZoomComponent.prototype, \"setEnableLens\", null);\n\n__decorate([Input('lensWidth')], NgxImageZoomComponent.prototype, \"setLensWidth\", null);\n\n__decorate([Input('lensHeight')], NgxImageZoomComponent.prototype, \"setLensHeight\", null);\n\n__decorate([Input('circularLens')], NgxImageZoomComponent.prototype, \"setCircularLens\", null);\n\n__decorate([Input('enableScrollZoom')], NgxImageZoomComponent.prototype, \"setEnableScrollZoom\", null);\n\nlet NgxImageZoomModule = /*#__PURE__*/(() => {\n  let NgxImageZoomModule = class NgxImageZoomModule {};\n\n  NgxImageZoomModule.ɵfac = function NgxImageZoomModule_Factory(t) {\n    return new (t || NgxImageZoomModule)();\n  };\n\n  NgxImageZoomModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxImageZoomModule\n  });\n  NgxImageZoomModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NgxImageZoomModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxImageZoomModule, {\n    declarations: function () {\n      return [NgxImageZoomComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgxImageZoomComponent];\n    }\n  });\n})();\n/*\r\n * Public API Surface of ngx-image-zoom\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxImageZoomComponent, NgxImageZoomModule }; //# sourceMappingURL=ngx-image-zoom.js.map","map":null,"metadata":{},"sourceType":"module"}